
Certainly! You can create a Python function to generate the Fibonacci sequence using a recursive approach or an iterative approach. Here's how you can implement both:

Recursive Approach:
python
Copy code
def fibonacci_recursive(n):
    if n <= 1:
        return n
    else:
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# Example usage:
n_terms = 10
fibonacci_sequence = [fibonacci_recursive(i) for i in range(n_terms)]
print(fibonacci_sequence)
Iterative Approach:
python
Copy code
def fibonacci_iterative(n):
    fibonacci_sequence = [0, 1]
    if n <= 1:
        return fibonacci_sequence[:n+1]

    for i in range(2, n+1):
        next_term = fibonacci_sequence[-1] + fibonacci_sequence[-2]
        fibonacci_sequence.append(next_term)
    return fibonacci_sequence

# Example usage:
n_terms = 10
fibonacci_sequence = fibonacci_iterative(n_terms)
print(fibonacci_sequence)
Both approaches will generate the Fibonacci sequence up to the nth term. You can adjust n_terms to generate a longer or shorter sequence as needed.





